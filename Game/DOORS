local Library = loadstring(game:HttpGet("https://github.com/RGV-devid/Script/blob/main/Library/MacLib.lua?raw=true"))()
local ToggleUI = loadstring(game:HttpGet("https://github.com/ImamGV/Ui/blob/main/ToggleUI?raw=true"))

local Window = Library:Window({
	Title = "YOUHUB | DOORS",
	Subtitle = "BETA v0.0.2 ",
	Size = UDim2.fromOffset(860, 650),
	DragStyle = 1,
	DisabledWindowControls = {},
	ShowUserInfo = true,
	Keybind = Enum.KeyCode.RightControl,
	AcrylicBlur = true,
})

local UISettings = {
UIBlurToggle = Window:GlobalSetting({
		Name = "UI Blur",
		Default = Window:GetAcrylicBlurState(),
		Callback = function(v)
		Window:SetAcrylicBlurState(v)
		Window:Notify({
				Title = Window.Settings.Title,
				Description = (v and "Enabled" or "Disabled") .. " UI Blur",
				Lifetime = 5
		})
 end,
}),
ShowUserInfo = Window:GlobalSetting({
		Name = "Show User Info",
		Default = Window:GetUserInfoState(),
		Callback = function(v)
		Window:SetUserInfoState(v)
		Window:Notify({
				Title = Window.Settings.Title,
				Description = (v and "Showing" or "Redacted") .. " User Info",
				Lifetime = 5
			})
		end,
	})
}

local Groups = {
	Group = Window:TabGroup()
}

local Tabs = {
     Main = Groups.Group:Tab({ Name = "Main", Image = "rbxassetid://18821914323" }),
     Players = Groups.Group:Tab({ Name = "Players", Image = "rbxassetid://10747373176" }),
     Entities = Groups.Group:Tab({ Name = "Entities", Image = "rbxassetid://10734951847" }),
     Visual = Groups.Group:Tab({ Name = "Visual", Image = "rbxassetid://10723396107" }),
     ESP = Groups.Group:Tab({ Name = "ESP", Image = "rbxassetid://10734954538" }),
     Settings = Groups.Group:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" })
}

local Section = {
	Death = Tabs.Main:Section({ Side = "Left" }),
        Fast = Tabs.Main:Section({ Side = "Right" }),
        Reach = Tabs.Main:Section({ Side = "Left" }),
        Interact = Tabs.Main:Section({ Side = "Right" }),
        Automation = Tabs.Main:Section({ Side = "Left" }),
        Alert = Tabs.Main:Section({ Side = "Right" })
}
local Header = {
Death = Section.Death:Header({Name = "Death"}),
Fast = Section.Fast:Header({Name = "Fast"}),
Reach = Section.Reach:Header({Name = "Reach"}),
Interact = Section.Interact:Header({Name = "Interact"}),
Automation = Section.Automation:Header({Name = "Automation"}),
Alert = Section.Alert:Header({Name = "Alert"})
}

Section.Death:Dropdown({
	Name = "Select On Death",
	Multi = false,
	Required = true,
	Options = {"Leave","Lobby","Revive"},
	Default = 1,
	Callback = function(v)
_G.SelectOnDeath = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.EnabledOnDeath then
if game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Lobby" then
RemotesFolder.Lobby:FireServer()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Leave" then
game:Shutdown()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Revive [FREE]" then
RemotesFolder.Revive:FireServer()
end
end
end)
end})
Section.Death:Toggle({
	Name = "Enabled On Death",
	Default = false,
	Callback = function(v)
_G.EnabledOnDeath = v
Window:Notify({
Title = Window.Settings.Title,
Description = (v and "Enabled " or "Disabled ") .. "On Death"
})
end})






















