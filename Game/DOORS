local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameData = ReplicatedStorage:WaitForChild("GameData")
local Players = game:GetService("Players")
local Floor = GameData:WaitForChild("Floor")
local Fools = Floor.Value == "Fools"
local Hotel = Floor.Value == "Hotel"
local Rooms = Floor.Value == "Rooms"
local Mines = Floor.Value == "Mines"
local Retro = Floor.Value == "Retro"
local Rooms = Floor.Value == "Rooms"
local Backdoor = Floor.Value == "Backdoor"
if Fools then
RemotesFolder = ReplicatedStorage.EntityInfo
else
RemotesFolder = ReplicatedStorage.RemotesFolder
end
function Alert(desc,time)
Window:Notify({
Title = Window.Settings.Title,
Description = desc,
Lifetime = time or 3
})
end
local Library = loadstring(game:HttpGet("https://github.com/RGV-devid/Script/blob/main/Library/MacLib.lua?raw=true"))()

local Window = Library:Window({
	Title = "YOUHUB | DOORS",
	Subtitle = "BETA v0.0.2 ",
	Size = UDim2.fromOffset(860, 650),
	DragStyle = 1,
	DisabledWindowControls = {},
	ShowUserInfo = true,
	Keybind = Enum.KeyCode.RightControl,
	AcrylicBlur = true,
})

local UISettings = {
UIBlurToggle = Window:GlobalSetting({
		Name = "UI Blur",
		Default = Window:GetAcrylicBlurState(),
		Callback = function(v)
		Window:SetAcrylicBlurState(v)
		Window:Notify({
				Title = Window.Settings.Title,
				Description = (v and "Enabled" or "Disabled") .. " UI Blur",
				Lifetime = 5
		})
 end,
}),
ShowUserInfo = Window:GlobalSetting({
		Name = "Show User Info",
		Default = Window:GetUserInfoState(),
		Callback = function(v)
		Window:SetUserInfoState(v)
		Window:Notify({
				Title = Window.Settings.Title,
				Description = (v and "Showing" or "Redacted") .. " User Info",
				Lifetime = 5
			})
		end,
	})
}

local Groups = {
	Group = Window:TabGroup()
}

local Tabs = {
     Main = Groups.Group:Tab({ Name = "Main", Image = "rbxassetid://18821914323" }),
     Players = Groups.Group:Tab({ Name = "Players", Image = "rbxassetid://10747373176" }),
     Entities = Groups.Group:Tab({ Name = "Entities", Image = "rbxassetid://10734951847" }),
     Visual = Groups.Group:Tab({ Name = "Visual", Image = "rbxassetid://10723396107" }),
     ESP = Groups.Group:Tab({ Name = "ESP", Image = "rbxassetid://10734954538" }),
     Settings = Groups.Group:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" })
}

local Section = {
	Death = Tabs.Main:Section({ Side = "Left" }),
        Fast = Tabs.Main:Section({ Side = "Right" }),
        Reach = Tabs.Main:Section({ Side = "Left" }),
        Interact = Tabs.Main:Section({ Side = "Right" }),
        Automation = Tabs.Main:Section({ Side = "Left" }),
        World = Tabs.Main:Section({ Side = "Right" }),
        Misc = Tabs.Main:Section({ Side = "Left" }),
        Alert = Tabs.Main:Section({ Side = "Right" })
}
local Header = {
Death = Section.Death:Header({Name = "Death"}),
Fast = Section.Fast:Header({Name = "Fast"}),
Reach = Section.Reach:Header({Name = "Reach"}),
Interact = Section.Interact:Header({Name = "Interact"}),
Automation = Section.Automation:Header({Name = "Automation"}),
World = Section.World:Header({Name = "World"}),
Misc = Section.Misc:Header({Name = "Misc"}),
Alert = Section.Alert:Header({Name = "Alert"})
}

Section.Death:Dropdown({
	Name = "Select on Death",
	Multi = false,
	Required = true,
	Options = {"Leave","Lobby","Revive"},
	Default = 1,
	Callback = function(v)
_G.SelectOnDeath = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.EnabledOnDeath then
if game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Lobby" then
RemotesFolder.Lobby:FireServer()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Leave" then
game:Shutdown()
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 and _G.SelectOnDeath == "Revive [FREE]" then
RemotesFolder.Revive:FireServer()
end
end
end)
end})
Section.Death:Toggle({
	Name = "Enabled on Death",
	Default = false,
	Callback = function(v)
_G.EnabledOnDeath = v
end})


game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.FastDoors then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door"):SetAttribute("FastOpen", true)
end 
end)
end)
Section.Fast:Toggle({
	Name = "Fast Doors",
	Default = false,
	Callback = function(v)
_G.FastDoors = v
end})


game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.DoorsReach then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door").ClientOpen:FireServer()
end 
end)
end)
Section.Reach:Toggle({
	Name = "Doors Reach",
	Default = false,
	Callback = function(v)
_G.DoorsReach = v
end})
Section.Reach:Toggle({
	Name = "Reach",
	Default = false,
	Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 15
end
end
IncreasedDistance = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 15
end
end
end)
else
IncreasedDistance:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 8
end
end
end
end})

Section.Interact:Toggle({
	Name = "Through Interact",
	Default = false,
	Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
ThroughInteract = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
end)
else
ThroughInteract:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = true
end
end
end
end})
Section.Interact:Toggle({
	Name = "Instance Interact",
	Default = false,
	Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
InstanceInteract = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
end)
else
InstanceInteract:Disconnect()
end
end})
Section.Interact:Toggle({
	Name = "Classic Interact",
	Default = false,
	Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.PromptService.Enabled = false
v.Style = "Default"
end
end
ClassicInteract = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.PromptService.Enabled = false
v.Style = "Default"
end
end
end)
else
ClassicInteract:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.PromptService.Enabled = true
v.Style = "Custom"
end
end
end
end})


Section.Automation:Toggle({
	Name = "Auto Breaker",
	Default = false,
	Callback = function(v)
_G.AutoBreaker = v
while _G.AutoBreaker do wait(1)
if _G.AutoBreaker then
RemotesFolder.EBF:FireServer()
end
end
end})
Section.Automation:Toggle({
	Name = "Auto Padlock Unlock",
	Default = false,
	Callback = function(v)
_G.AutoPadlockUnlock = v
while _G.AutoPadlockUnlock do wait(0.5)
        for _, player in pairs(game.Players:GetPlayers()) do
            if not player.Character then continue end
            local tool = player.Character:FindFirstChildOfClass("Tool")

            if tool and tool.Name:match("LibraryHintPaper") then
                local code = tool:FindFirstChild("Code") and tool.Code.Value or nil
                local padlock = workspace:FindFirstChild("Padlock", true)

                if tonumber(code) and (padlock.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.PadlockUnlockDistance or 50 then
                    firetouchinterest(padlock, game.Players.LocalPlayer.Character.HumanoidRootPart, 0)
                    firetouchinterest(padlock, game.Players.LocalPlayer.Character.HumanoidRootPart, 1)
                end
            end
        end
    end
end})
Section.Automation:Divider()
Section.Automation:Dropdown({
	Name = "Unlock Distance",
	Multi = false,
	Required = true,
	Options = {"50","100","150","200"},
	Default = 1,
	Callback = function(v)
_G.PadlockUnlockDistance = v
end})


game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(function()
if _G.ClosetsExitFix and game.Players.LocalPlayer.Character:GetAttribute("Hiding")==true then 
RemotesFolder.CamLock:FireServer()
end 
end)
Section.World:Toggle({
	Name = "Closets Exit Fix",
	Default = false,
	Callback = function(v)
_G.ClosetsExitFix = v
end})
if Retro then
Section.World:Toggle({
	Name = "Hiding Fake Bridge",
	Default = false,
	Callback = function(v)
_G.BlurFakeBridge = v
if _G.BlurFakeBridge then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0.9
end
end
BlurFakeBridge = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0.75
end
end
end)
else
BlurFakeBridge:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0
end
end
end
end})
end
if Backdoor then
Section.World:Toggle({
	Name = "Hiding Live Sanity",
	Default = false,
	Callback = function(v)
_G.NoLiveSanity = v
while _G.NoLiveSanity do wait(1)
for _,v in workspace.CurrentCamera:GetChildren() do
if v.Name == "LiveSanity" and workspace:FindFirstChild("EntityModel") then
v.Enabled = not _G.NoLiveSanity
end
end
end
end})
end
Section.World:Toggle({
	Name = "No Void Roblox",
	Default = false,
	Callback = function(v)
if v then
workspace.FallenPartsDestroyHeight = 0 / 0
else
workspace.FallenPartsDestroyHeight = -50000
end
end})


Section.Misc:Button({
	Name = "Lobby",
	Callback = function()
	Window:Dialog({
	Title = Window.Settings.Title,
	Description = "You want return to Lobby?",
	Buttons = {
		{Name = "Confirm",
		Callback = function()
		RemotesFolder.Lobby:FireServer()
		end},
		{Name = "Cancel"}}})
end})
Section.Misc:Button({
	Name = "Revive",
	Callback = function()
	Window:Dialog({
	Title = Window.Settings.Title,
	Description = "You want Revive?",
	Buttons = {
		{Name = "Confirm",
		Callback = function()
		RemotesFolder.Revive:FireServer()
		end},
		{Name = "Cancel"}}})
end})
Section.Misc:Button({
	Name = "Play Again",
	Callback = function()
	Window:Dialog({
	Title = Window.Settings.Title,
	Description = "You want Play Again?",
	Buttons = {
		{Name = "Confirm",
		Callback = function()
		RemotesFolder.PlayAgain:FireServer()
		end},
		{Name = "Cancel"}}})
end})
Section.Misc:Button({
	Name = "Leave",
	Callback = function()
	Window:Dialog({
	Title = Window.Settings.Title,
	Description = "You want exit game?",
	Buttons = {
		{Name = "Confirm",
		Callback = function()
		game:Shutdown()
		end},
		{Name = "Cancel"}}})
end})
Section.Misc:Button({
	Name = "Reset Character",
	Callback = function()
	Window:Dialog({
	Title = Window.Settings.Title,
	Description = "You want die?",
	Buttons = {
		{Name = "Confirm",
		Callback = function()
		Players.LocalPlayer.Character.Humanoid.Health = 0
		end},
		{Name = "Cancel"}}})
end})

Section.Alert:Toggle({
	Name = "Alert Entity",
	Default = false,
	Callback = function(v)
if v then
local Entity = {"SeekMovingNewClone","SeekMoving","GlitchAmbush","GlitchRush","BackdoorLookman","BackdoorRush","GloombatSwarm","Eyes","JeffTheKiller","RushMoving","AmbushMoving","A60","A120"}
NotificationEntity = workspace.ChildAdded:Connect(function(v)
if table.find(Entity,v.Name) then
repeat task.wait() until game.Players.LocalPlayer:DistanceFromCharacter(v:GetPivot().Position) < 750 or not v:IsDescendantOf(workspace)
if v:IsDescendantOf(workspace) then
if v.Name == "RushMoving" then
Alert("Rush has spawn!")
end
if v.Name == "AmbushMoving" then
Alert("Ambush has spawn!")
end
if v.Name == "BackdoorRush" then
Alert("Blitz has spawn!")
end
if v.Name == "A60" then
Alert("A60 has spawn!")
end
if v.Name == "A120" then
Alert("A120 has spawn!")
end
if v.Name == "GlitchAmbush" then
Alert("Glitch Ambush has spawn!")
end
if v.Name == "GlitchRush" then
Alert("Glitch Rush has spawn!")
end
if v.Name == "GloombatSwarm" then
Alert("Gloombat Swarm has spawn!")
end
if v.Name == "Eyes" then
Alert("Eyes has spawn!")
end
if v.Name == "BackdoorLookman" then
Alert("Lookman has spawn!")
end
if v.Name == "JeffTheKiller" then
Alert("Jeff The Killer has spawn!")
end
if (v.Name == "SeekMoving" or v.Name == "SeekMovingNewClone") then
Alert("Seek chase, goodluck!")
end
end
end
end)
else
NotificationEntity:Disconnect()
end
end})
